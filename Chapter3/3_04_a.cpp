// https://atcoder.jp/contests/apg4b/tasks/APG4b_ab

// 【構造体】

/*
キーポイント

・構造体によって、「複数の型をまとめた新しい型」を作ることが出来る
・構造体の定義
```
struct 構造体名 {
    型1 メンバ変数名1
    型2 メンバ変数名2
    型3 メンバ変数名3
    ...(必要な分だけ書く)
};  // ← セミコロンが必要
```

・構造体の変数の宣言
```構造体名 変数名;```

・構造体型の値のことをオブジェクトという
・宣言と同時に初期化
```
構造体名 オブジェクト名 = {メンバ変数1の値, メンバ変数2の値, メンバ変数3の値, ...(必要な分だけ書く)};
```

・メンバ変数・メンバ関数はそれぞれオブジェクトに紐付いた変数・関数として使うことができる
・メンバ変数へのアクセス
```
struct 構造体名 {
    返り値の型 メンバ関数名(引数の型1 引数名1, 引数の型2 引数名2, ...) {
    // 関数の内容
    //   (ここではメンバ変数に直接アクセスすることができる)
    }
};
```

・メンバ関数の呼び出し
```オブジェクト.メンバ関数(引数1, 引数2, ...)```

[構造体]
構造体関連の機能はたくさんあるので、このページでは主要なものを簡単に説明します。
構造体を用いることで、「複数の型をまとめた新しい型」を定義することができます。
*/

#include <bits/stdc++.h>
using namespace std;

struct MyPair {
    // メンバ変数
    int x;     // 1つ目のデータはint型であり、xという名前でアクセスできる
    string y;  // 2つ目のデータはstring型であり、yという名前でアクセスできる
};

int main() {
    MyPair p = {12345, "hello"};  // MyPair型の値を宣言
    cout << "p.x = " << p.x << endl;
    cout << "p.y = " << p.y << endl;
    /*
    【実行結果】
    p.x = 12345
    p.y = hello
    */
}

/*
MyPairという構造体を定義しています。 
この構造体はint型とstring型をまとめたもので、それぞれx, yという名前がついています。
これら1つ1つのデータをメンバ変数といいます。

[構造体の定義]``` 
struct 構造体名 {
    型1 メンバ変数名1
    型2 メンバ変数名2
    型3 メンバ変数名3
    ...(必要な分だけ書く)
};  // ← セミコロンが必要
```

構造体の定義は関数の外側、内側のどちらにも書くことができます。

構造体を定義することによって新しい型が使えるようになります。 
例えば、上の例ではMyPairという構造体を定義したので、それ以降MyPairという型が使えるようになります。

[宣言・初期化]
構造体の変数を宣言するには、通常の変数の宣言と同じように次のように書きます。
```構造体名 変数名;```

また、次のように構造体目を用いて構造体の値を生成することもできます。
```auto 変数名 = 構造体名();```

構造体名を使う方法は一時変数を作りたい場合に便利です。
なお、構造体型の値のことを **オブジェクト** といいます
> 例えば、はじめのサンプルプログラムの`p`は`Mypair`型のオブジェクトです。

宣言と同時に、メンバ変数の初期化を行う場合は次のようにします。
```
構造体名 オブジェクト名 = {メンバ変数1の値, メンバ変数2の値, メンバ変数3の値, ...(必要な分だけ書く)}
```

[メンバ変数]
構造体には、オブジェクトに関連した処理を行う関数を定義することができ、この関数をメンバ関数といいます。
メンバ関数は次のように定義します。
```
struct 構造体名 {
    返り値の型 メンバ関数名(引数の型1 引数名1, 引数の型2 引数名2, ...) {
    // 関数の内容
    //   (ここではメンバ変数に直接アクセスすることができる)
    }
};
```

メンバ関数を呼び出すには次のようにします。
```オブジェクト.メンバ関数(引数1, 引数2, ...)```

メンバ関数の特徴は「メンバ関数が紐づいているオブジェクトのメンバ変数」に関数内からアクセスする場合に、オブジェクトの指定なしに直接アクセスできることです。
この点を除けば、通常の関数と同じように使うことができます。
/*
